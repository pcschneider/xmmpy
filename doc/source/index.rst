.. xmmpy documentation master file, created by
   sphinx-quickstart on Thu Dec  8 16:33:39 2022.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to xmmpy's documentation!
=================================

Usage
=====

Example
---------

(*heainit* and *sasinit* must have been run in the specific terminal.)

Download, process and generate source products for one specific source::

  xmm_full_process.sh obsID sourcename [directory, default=.]


This command runs, in series, the scripts generated by the following sequence::

  xmm_retrieve.py obsID directory
  xmm_source_regions.py directory/obsID sourcename
  xmm_source_products.py directory/obsID sourcename
  
  
The data are then to be found in following directories:

  - Eventfiles and images: ``directory/{obsID}/odata``
  - Spectra: ``directory/{obsID}/specs``
  - Light curves: ``directory/{obsID}/lcs``
  
and the log-file will be (in the future)::

    directory/{obsID}/xmmpy_main.log

**Run without generating an extra shell script**    

Simply do::
  
  eval "$(command)"

where ``command`` is either ``xmm_retrieve.py`` or ``xmm_source_products`` with its arguments.
    
  
Step-by-step Example
---------------------

Setup paths::

  export xmmpy=/home/majestix/hdd/tools/xmmpy
  export PATH=$PATH:${xmmpy}/bin
  export PYTHONPATH=$PYTHONPATH:/home/majestix/hdd/tools

Generate regions::

  xmm_source_regions.py 0892000501/ 'TOI-776' --script='source_regs.sh'
  . source_regs.sh

Check regions::

    xmm_ds9_for_images.py 0892000501/ 'TOI-776'

Correction region format (because ds9 cannot save regions to fits-files)::

    xmm_correct_region_file_format.py 0892000501/  
    #(if only one config files, else provide config-file directly)

Generate source products::

  xmm_source_products.py 0892000501/ 'TOI-776'

  
High level scripts
----------------------

The following scripts can be used to process data:

**xmm_retrieve**

Download data from the XMM-Newton archive and performs the first reduction steps. If run as::

  xmm_retrieve.py obsID directory --script=xt.sh

it generates a script (``xt.sh``), which can be sourced to download the data and to run the script::

  directory/reduce_odf_{obsID}.sh
  
which itself calls::

  directory/make_xmm.sh    # <- copy of the general reduction script
  directory/{obsID}/sas_{obsID}.sh   # <- usual file to set SAS_ODF etc.

to generate::

  directory/{obsID}/odata # with the event-files and images

and the conf-file::

  directory/{obsID}/xmmpy0109060301.conf # standard conf-file
  
as well as the log-files::

  directory/reduce_odf_{obsID}.log
  
and log-files for some SAS-tasks::

  directory/{obsID}/cifbuild.log
  directory/{obsID}/odfingest.log
  directory/{obsID}/emproc.log
  directory/{obsID}/epproc.log
  
Essentially, the script downloads the data and runs ``make_xmm.sh``.

(Requires SAS and partially runs in bash.)

**xmm_source_regions**

Generates source and background regions. Run as::

  xmm_source_regions.py directory/{obsID} "source name"  --script=xr.sh
  
The source and background regions will be::

  directory/{obsID}/odata/*reg*.fits

The script looks up the source in Simbad, propagates the sky position to the observation date and generates *one* source region (``*_reg_src.fits``) as well as individual background regions for pn, m1, and m2 (``*_reg_bkg_{det}.fits``). Source regions are circles. 

Log-file: ``xmmpy.log``

.. note::

  While this script requires a directory as input, it really uses the xmmpy{obsID}.conf-file to find files.
  
**xmm_source_products**

**xmm_full_process**

Some Helper Functions
=====================
.. toctree::
   :maxdepth: 2

   etc 

Further information
===================

.. toctree::
   :maxdepth: 2

   installation
   internal_doc
   next_steps
   

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
